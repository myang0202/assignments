class BankAccount
    attr_reader :account_number, :checking_amount, :saving_amount

    def initialize
        @@num_of_accounts += 1
        @account_number = new_account_number
        @checking_amount =  0
        @saving_amount = 0
        @interest = new_interest_rate
    end

    def number_of_accounts
        puts "Bank has #{@@num_of_accounts} account(s)."
    end

    # allow a user to deposit money into either their checking or saving account
    # allow a user to withdraw money from one of their accounts, return a error if there are insufficient funds
    def check_checking # returns the user's checking account balance
        return "##{@account_number} Checking Amount: $%d" % @checking_amount
        # self
    end
    def check_saving # returns the user's saving account balance
        return "##{@account_number} Saving Amount: $%d" % @saving_amount
        # self
    end
    def check_total # returns the user's saving account balance
        return "##{@account_number} Total Amount: $%d" % (@checking_amount + @saving_amount)
        # self
    end

    def deposit_checking(amount)
        @checking_amount += amount
        puts "##{@account_number} Checking Deposit: $%d" % amount
        self
    end
    def deposit_saving(amount)
        @saving_amount += amount
        puts "##{@account_number} Saving Deposit: $%d" % amount
        self
    end

    def withdraw_checking(amount)
        if @checking_amount < amount
            return "##{@account_number} Error: Insufficient funds available on checking. Could not withdraw $#{amount}."
        else
            @checking_amount -= amount
            return "##{@account_number} Checking Withdraw: $#{amount}"
        end
        # self
    end
    def withdraw_saving(amount)
        if @saving_amount < amount
            return "##{@account_number} Error: Insufficient funds available on saving. Could not withdraw $#{amount}."
        else
            @saving_amount -= amount
            return "##{@account_number} Saving Withdraw: $#{amount}"
        end
        # self
    end

    # displays account number, total money, 
    # checking balance, saving balance, interest rate
    def account_information
        puts "Account Number: #%d" % @account_number
        puts "\t- Checking Amount: $%d" % @checking_amount       
        puts "\t- Saving Amount: $%d" % @saving_amount
        puts "\t- Total Amouunt: $%d" % (@checking_amount + @saving_amount)
        puts "\t- interest Rate: %f%" % @interest
    end

    private
        @@num_of_accounts = 0
        attr_reader :interest

    # returns a user's account number, account number should be 
    # generated by a private method, account number should be random
    def new_account_number
        return rand(99999999)
    end
    def new_interest_rate
        return rand(0..5.0)
    end

end